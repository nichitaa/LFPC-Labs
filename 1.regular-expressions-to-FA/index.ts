/*
*  LFPC
*  FAF - 192
*  Pasecinic Nichita
*
*  V16
*
*  Regular expression can be added in one line
*  with separator '|', like: S -> ab | bA
*  or without it, like so: S -> ab
*                       S -> bA
*
*  Resulted FA:
*  Can be used a Map instead of JS object
*  {
*     S: [ {b: 'S'}, {d: 'A'} ],
*     A: [ {a: 'A'}, {d: 'B'}, {b: 'Eps'} ],
*     B: [ {c: 'B'}, {a: 'Eps'} ]
*  }
*
*  Check if input string is accepted by FA
*  (true/false - Input string can be generated by traversing the FA)
*  Input Examples:
*  bbbdaadccca                -> true
*  bbbdaadccc                 -> false [c - is not a terminal charter for B node]
*  bbbdb                      -> true
*  bbbbdaad                   -> false
*  bbbbdaadc                  -> false
*  bbbbdaada                  -> true
*  bbbbdaaaaaadccccccccccccca -> true
*  All edge cases have successfully passed!
*
*/

import FA, {IFA} from './fa'
import inquirer from "inquirer";

// Demo FA for var16
const demo: IFA = {
    S: [{b: 'S'}, {d: 'A'}],
    A: [{a: 'A'}, {d: 'B'}, {b: 'Eps'}],
    B: [{c: 'B'}, {a: 'Eps'}],
};

// cli constants
const REG_EXP: string = 'parse new regular-expression';
const DISPLAY_FA: string = 'display current FA';
const INPUT_STR: string = 'check input string for FA';
const EXIT: string = 'exit';

// Note: !Pass an empty object to FA()
// to construct a new one from regular expressions from cli
const fa: FA = new FA(demo);

const regularExpressionAction = async (): Promise<void> => {
    console.log()
    return await inquirer.prompt([{
        type: 'input',
        message: 'Input a valid regular expresion (e.g. S -> aB | bA) :',
        // default: 'S -> aB | b', // can be as default input
        name: 'expression'
    }])
        .then(({expression}: { expression: string }) => {
            fa.parseRegularExpressionInput(expression);
            displayFA(true);
        })
}

const checkInputStringAction = async (): Promise<void> => {
    console.log()
    return await inquirer.prompt([{
        type: 'input',
        message: 'Input a string to check if it is accepted by current FA!',
        name: 'string'
    }])
        .then(({string}: {string: string}) => {
            console.log(`Traversing FA for: "${string}"`);
            console.log(fa.parseInputStringForFA(string))
            console.log()
        })
}

const displayFA = (updated?: boolean) => {
    console.clear();
    if (updated) console.log('Updated FA: ')
    else console.log('Current FA: ');
    // console.log(`${JSON.stringify(fa.fa, null, 2)}\n`);
    console.log(fa.fa);
    console.log();
}

const cli = (clear?: boolean) => {
    if (clear) console.clear();
    inquirer
        .prompt([{
            type: 'list',
            message: 'Select an action',
            name: 'action',
            choices: [
                REG_EXP,
                DISPLAY_FA,
                INPUT_STR,
                EXIT
            ]
        }])
        .then(async ({action}: {action: string}) => {
            if (action === REG_EXP) {
                await regularExpressionAction();
            } else if (action === DISPLAY_FA) {
                displayFA();
            } else if (action === INPUT_STR) {
                await checkInputStringAction();
            } else if (action === EXIT) {
                console.clear();
                process.exit(0);
            }
        })
        .then(() => cli())
        .catch(err => console.log('CLI Error: ', err))
}

cli(true);
