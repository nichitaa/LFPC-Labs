/*
*  LFPC
*  FAF - 192
*  Pasecinic Nichita
*
*  V16
*
*  Expression for states can be added in one line with separator '|'
*  Or without it (  ex: S -> ab
*                       S -> Ab )
*  Acceptable Console Input for regular grammar:
*  S -> bS | dA
*  A -> aA | dB | b
*  B -> cB | a
*
*  Resulted FA:
*  For simplicity I used JS object, could be used Map as well.
*  But is not needed at the current state
*  {
*     S: [ {b: 'S'}, {d: 'A'} ],
*     A: [ {a: 'A'}, {d: 'B'}, {b: 'Eps'} ],
*     B: [ {c: 'B'}, {a: 'Eps'} ]
*  }
*
*  String Input Example:
*  (true/false - can be generated by traversing the FA)
*  bbbdaadccca -> true
*  bbbdaadccc  -> false [c - is not a terminal charter for B node]
*  bbbdb       -> true
*  bbbbdaad    -> false
*  bbbbdaadc   -> false
*  bbbbdaada   -> true
*
*  All edge cases successfully passed!
*
*/

import prompt from 'prompt';
import FA, {faI} from './fa'

// Demo FA var16
const demo: faI = {
	S: [{b: 'S'}, {d: 'A'}],
	A: [{a: 'A'}, {d: 'B'}, {b: 'Eps'}],
	B: [{c: 'B'}, {a: 'Eps'}],
};

// new instance of fa class
// Note: !Pass an empty object to FA() to construct a new one from regular expressions in console menu
const fa: FA = new FA(demo);

const grammarMenu = (): void => {
	console.log('Adding new regular grammar expresion to FA...');
	prompt.get(['grammar'], (err: object, input) => {
		if (err) return console.log('Error: ', err);
		if (input) {
			fa.parseRegularExpressionInput(input);
			menu();
		}
	});
};

const inputStringMenu = (): void => {
	console.log('Input a string to check if it is accepted by current FA!');
	prompt.get(['string'], (err: object, input) => {
		if (err) return console.log('Error: ', err);
		if (input) {
			console.log(`\nTraversing FA for: "${input.string}"`);
			console.log(fa.parseInputStringForFA(input)); // returns bool
			menu();
		}
	});
};

const displayFAMenu = (): void => {
	console.clear();
	console.log('Current FA:');
	console.log(fa.fa);
	menu();
}

const invalidAction = (): void => {
	console.clear()
	console.log('!!!Select a valid action!!!');
	menu();
}

const menu = (): void => {
	console.log('\n(1) → add reg-grammar');
	console.log('(2) → display current FA');
	console.log('(3) → check input string for FA');
	console.log('(4) → exit');
	prompt.get(['action'], (err: object, {action}: { action: string }) => {
		if (err) console.log('Error: ', err);
		else if (action === '1') {
			grammarMenu();
		} else if (action === '2') {
			displayFAMenu();
		} else if (action === '3') {
			inputStringMenu();
		} else if (action === '4') {
			process.exit();
		} else {
			invalidAction();
		}
	});
};

prompt.start();
menu();